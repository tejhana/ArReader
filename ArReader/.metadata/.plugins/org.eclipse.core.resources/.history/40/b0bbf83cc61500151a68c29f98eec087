package com.clc.arreader.fileprocessors;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;

import org.w3c.dom.Document;

public class ArTitlesReader extends ArReader {

	/**
	 * ArTitlesReader - R. Ryffel 6/15/2015
	 * 
	 * This object reads in a XML file and uses Xpath to parse it and extract the iBookID, iQuizID, iReadingLevel, vchInterestLevel, &iARPoints associated with it. 
	 * We are only concerned with ROWs which have a vchQuizType='RP' from this file. 
	 * From each row, we are only interested in the iQuizID, iReadingLevel, vchInterestLevel, and iARPoints attributes as these will be part of the output to the process.
	 * Ensure the XML Namespace Prefixes do not contain a # symbol. This causes an error with the UniversalNamespaceCache in the Util package. Remove the "#" from the xml file
	 * prior to running the application. 
	 */

	private boolean vchQuizTypeRp;
	
	public static final String AR_TITLES_XML = "sampleTitlesXML.xml";
	
	public ArTitlesReader()
	{
		super(AR_TITLES_XML);

	}
    public double getNumberOfDataRows(ArTitlesReader reader)
    {
    	double rowCount = 0;
    	String expression = "count(//xml/rs:data/z:row)";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
        try {
            XPathExpression expr =
                xpath.compile(expression);
            rowCount = (Double) expr.evaluate(doc, XPathConstants.NUMBER);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        System.out.println("rowCount: " + rowCount);
        return rowCount;
    }
    
    public boolean getvchQuizTypeRp(ArTitlesReader reader, long index) {

    	boolean quizTypeRp = false;
        String expression = "//xml/rs:data/z:row["+index+"]/@vchQuizType='RP'";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
      
        try {
            XPathExpression expr =
                xpath.compile(expression);
            quizTypeRp = (Boolean) expr.evaluate(doc, XPathConstants.BOOLEAN);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        System.out.println("quizTypeRp: " + quizTypeRp);
		return quizTypeRp;
	}
    
    public String getIbook(ArTitlesReader reader, long index) {
        String iBook = null;
        String expression = "//xml/rs:data/z:row["+index+"]/@iBookID";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
      
        try {
            XPathExpression expr =
                xpath.compile(expression);
            iBook = (String) expr.evaluate(doc, XPathConstants.STRING);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        //System.out.println("iBookID: " + iBook);
        return iBook;
    }
    
    public String getIquizId(ArTitlesReader reader, long index) {
        String iQuizID = null;
        String expression = "//xml/rs:data/z:row["+index+"]/@iQuizID";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
        
        try {

            XPathExpression expr =
                    xpath.compile(expression);
            iQuizID = (String) expr.evaluate(doc, XPathConstants.STRING);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        
        //System.out.println("iQuizID: " + iQuizID);
        return iQuizID;
    }
    
    public String getIReadingLevel(ArTitlesReader reader, long index) {
        String iReadingLevel = null;
        String expression = "//xml/rs:data/z:row["+index+"]/@iReadingLevel";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
        
        try {

            XPathExpression expr =
                    xpath.compile(expression);
            iReadingLevel = (String) expr.evaluate(doc, XPathConstants.STRING);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        
        //System.out.println("iReadingLevel: " + iReadingLevel);
        return iReadingLevel;
    }
    
    public String getVchInterestLevel(ArTitlesReader reader, long index) {
        String vchInterestLevel = null;
        String expression = "//xml/rs:data/z:row["+index+"]/@vchInterestLevel";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
        
        try {

            XPathExpression expr =
                    xpath.compile(expression);
            vchInterestLevel = (String) expr.evaluate(doc, XPathConstants.STRING);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        
        //System.out.println("vchInterestLevel: " + vchInterestLevel);
        return vchInterestLevel;
    }
    
    public String getIarPoints(ArTitlesReader reader, long index) {
        String iARPoints = null;
        String expression = "//xml/rs:data/z:row["+index+"]/@iARPoints";
        Document doc = reader.getDoc();
        XPath xpath = reader.getXpath();
        
        try {

            XPathExpression expr =
                    xpath.compile(expression);
            iARPoints = (String) expr.evaluate(doc, XPathConstants.STRING);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        
        //System.out.println("iARPoints: " + iARPoints);
        return iARPoints;
    }
    
	public boolean isVchQuizTypeRp() {
		return vchQuizTypeRp;
	}
	public void setVchQuizTypeRp(boolean vchQuizTypeRp) {
		this.vchQuizTypeRp = vchQuizTypeRp;
	}

}
